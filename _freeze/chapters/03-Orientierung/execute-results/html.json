{
  "hash": "708f3b7a0df996963fc2fac826d8afee",
  "result": {
    "markdown": "# Orientierung\n\nWenn ihr vorher noch nie eine Programmiersprache benutzt habt… ist das auch eigentlich gar nicht so schlimm, denn R verhält sich sowieso für den Einstieg etwas anders.  \n\"Programmiersprache\" klingt so abschreckend, weil es nach kompliziertem Informatikkram klingt, aber wenn ihr es in eurer Schulzeit geschafft habt einen Taschenrechner zu bedienen, dann bekommt ihr auch den Einstieg in R hin.  \nWas der Begriff \"Programmiersprache\" für uns heißt ist recht simpel:  \nR folgt Anweisungen. Anweisungen, die wir entweder in die Konsole (in RStudio das Fenster unten links) schreiben können, und dann mit der Entertaste bestätigt werden. R guckt dann, ob es weiß wovon ihr redet, und rödelt dann los — und wenn es weiß was es mit eurem Befehl anfangen soll, gibt es euch auch direkt eine Antwort.  \n\nGute Praxis^[Wenn wir von \"Guter Praxis\" reden, dann meint das in der Regel bestimmte Gewohnheiten, die wir euch empfehlen, weil sie euer Leben langfristig einfacher machen. Ihr müsst nicht immer sofort verstehen wieso wir euch irgendetwas empfehlen, aber seid euch sicher, dass da mehrere Jahre Erfahrung hinter stecken.] ist es übrigens, ein *Script* zu erstellen, das Scriptfenster ist dann in RStudio oben links. Dort könnt ihr einen Befehl pro Zeile schreiben und als Datei abspeichern, so müsst ihr euch bei eurer Arbeit nicht jeden Befehl einzeln merken, sondern könnt einfach das Script wieder neu ausführen und eure Ergebnisse tauchen alle wieder auf. \n\n## RStudio\n\nWenn ihr RStudio öffnet, seht ihr vermutlich folgendes:\n\n\n::: {.cell hash='03-Orientierung_cache/html/unnamed-chunk-1_e4a61423c3f6515ad7f8afa1688d52d2'}\n::: {.cell-output-display}\n![Ein frisches RStudio Fenster](../images/rstudio_fresh.png){width=688}\n:::\n:::\n\n\nAuf der rechten Seite habr ihr unter dem Reiter \"Environment\" eine Übersicht eurer Dateien und angelegten Variablen, sowie darunter mit der Hilfe und diversem anderem Krams, der uns zuerst noch nicht interessiert.  \nDas große Fenster zur linken Seite ist die Konsole, mit der beschäftigen wir uns zuerst.  \n\nBevor wir hier aber irgendwas machen, schaffen wir erstmal ein bisschen Struktur und erstellen ein neues Projekt.  \nEin Projekt ist einfach nur ein bestimmter Ordner, in dem ihr arbeiten könnt. Idealerweise ist es auch ein Ordner, den ihr auf eurem Computer einfach wiederfindet.\n\n\n::: {.cell hash='03-Orientierung_cache/html/unnamed-chunk-2_ac1905dd81d10180529b834bc077bc72'}\n::: {.cell-output-display}\n![Ein neues RStudio Projekt erstellen](../images/rstudio_new_project_0.png){width=688}\n:::\n:::\n\n::: {.cell hash='03-Orientierung_cache/html/unnamed-chunk-3_a639298b2c03984834fc702bbb8d48b0'}\n::: {.cell-output-display}\n![](../images/rstudio_new_project_1.png){width=350}\n:::\n\n::: {.cell-output-display}\n![](../images/rstudio_new_project_2.png){width=351}\n:::\n\n::: {.cell-output-display}\n![](../images/rstudio_new_project_3.png){width=376}\n:::\n:::\n\n\nAm Ende solltet ihr euer erstes Projekt erstellt haben.  \nHier könnt ihr jetzt den Rest der Einführung über bleiben und Scripte erstellen und sowieso und überhaupt, und wenn ihr brav alles gespeichert habt, könnt ihr darauf auch in drei Wochen noch wieder zurückgreifen, indem ihr einfach das Projekt aus der entsprechenden Leiste in RStudio auswählt.\n\n\n::: {.cell hash='03-Orientierung_cache/html/unnamed-chunk-4_640b3d0286826394a931f09b48882a81'}\n::: {.cell-output-display}\n![RStudio merkt sich eure letzten paar Projekte](../images/rstudio_projects.png){width=342}\n:::\n:::\n\n\nAlternativ könnt ihr auch auf eurem Computer den Ordner mit dem Projekt öffnen^[Es bietet sich an, RStudio Projekte irgendwo zentral zu organisieren, oder sie zum Beispiel in einem Unterordner für euer Studiumszeug anzulegen. Bei mir war das z.B. sowas wie `Dokumente/Studium/Psychologie/Statistik/`], dort dann einfach die Datei mit dem RStudio-Logo und der `.Rproj`-Endung öffnen. Falls ihr Windows benutzt, werden die Dateiendungen per Standard nicht angezeigt - die Datei hat aber den gleichen Namen, den ihr auch dem Projekt gegeben habt und das Symbol sieht ungefähr so aus:\n\n\n::: {.cell hash='03-Orientierung_cache/html/unnamed-chunk-5_e2300f939dd10744ff2bd453c7b2a499'}\n::: {.cell-output-display}\n![Ein RStudio Projektordner](../images/rstudio_project_file.png){width=155}\n:::\n:::\n\n\nAls nächstes können wir uns **Konsole** und **Text Editor** widmen: Ihr könnt in der Regel immer nur in einem der beiden Bereiche schreiben, und erkennt den aktiven Bereich am blinkenden Cursor (ein bisschen wie in Textprogrammen á la Word) — Konsole und Editor sind die wichtigsten Bereiche in RStudio, und dort wird auch der Großteil eurer Arbeit gemacht.\n\n## Konsole\n\nJetzt habt ihr ein frisches Projekt und könnt loslegen.  \nAls erstes müssen wir uns mit der Konsole (dem Teil unten links) vertraut machen.  \nHier könnt ihr Frage-Antwort-mäßig Befehle eingeben, mit Enter bestätigen, und erhaltet eine Antwort.  \nHier kommt die Taschenrechner-Analogie wieder — versucht mal folgendes:\n\n```r\n928 + 182\n```\n\n\n::: {.cell hash='03-Orientierung_cache/html/unnamed-chunk-6_4b30f1e1c91b705f42c66c7d742cb6f6'}\n::: {.cell-output-display}\n![Oh Schreck, es funktioniert tatsächlich!](../images/console_math_1.png){width=574}\n:::\n:::\n\n\nDie Mathe-Basics in R:  \n\n- Addition: `+`: `52 + 365` --> 417\n- Subtraktion: `-`: `2017 - 18` --> 1999\n- Multiplikation: `*`: `4*21` --> 84\n- Division: `/`: `936/12` --> 78\n- Exponentiation: `^`: `2^10` --> 1024\n- Klammern: `(`, `)`: `3 * (12 - 8) + 2^(5/2)`\n    - Wie beim Taschenrechner: Lieber zwei mehr als nötig als eine zu wenig\n    - …und ja, jede [offene Klammer](https://xkcd.com/859/) braucht eine geschlossen Klammer, sonst gibt's Fehler\n- Das Dezimaltrennzeichen ist der Punkt `.`: 12,1 wird eingegeben als `12.1`\n\nAnsonsten gibt es etliche weitere mathematischen Funktionen, und wir können das ganze beliebig komplex aussehen lassen:\n\n```r\n2 + sin((2*pi)/3) * exp(5)\n```\n\nHier sehen wir mehrere neue Dinge:\n\nErstens: `pi` ist wirklich, naja, $\\pi$. Das mit dem Kreis. Als Konstante schon in R vorgespeichert, weil ja kein Mensch $\\pi$ auf der Tastatur findet[^pi].  \nZweitens: `sin()` und `exp()` sind **Funktionen**. Die sind ziemlich wichtig, aber denen wenden wir uns erst im nächsten Abschnitt zu.  \nWas wir da geschrieben haben sieht übersetzt in Mathe übrigens so aus…\n\n\n$$2 + \\sin \\left( \\frac{2\\pi}{3} \\right) \\cdot e^{5}$$\n\n\n… und ergibt etwa 130,5. Aber darum geht's eigentlich gar nicht. \n\n### Gängige Probleme\n\nWas den meisten Leuten während der R-Einführung passiert ist, dass sie einen Befehl in die Konsole eingeben und Enter drücken, aber der Befehl nicht richtig abgeschlossen (*korrekt terminiert*) wurde. Das passiert zum Beispiel, wenn ihr eine schließende Klammer vergesst, oder etwa ein `+` am Ende der Zeile habt. In diesen Fällen drückt ihr Enter und R nimmt euren Befehl entgegen, aber es merkt, dass da irgendwas fehlt und wartet auf den Rest des Befehls.  \nIhr erkennt das daran, dass das Symbol an der linken Seite eurer Konsole auf einmal ein `+`-Symbol statt eines `>` ist und auch wiederholtes Drücken der Entertaste nichts daran ändert.  \n\n\n::: {.cell hash='03-Orientierung_cache/html/unnamed-chunk-7_ec5ed8943b682f21b6d07532a6313eb5'}\n::: {.cell-output-display}\n![Plus was denn?!](../images/inkorrekt_terminiert1.png){width=90%}\n:::\n:::\n\n\nIhr habt an dieser Stelle zwei Möglichkeiten:\n\n- Drückt Escape (`esc`) um den Befehl abzubrechen und es nochmal zu versuchen\n- Führt den Befehl korrekt zu Ende, sprich schließt ggf. offene Klammern etc.\n\n## Text Editor\n\nAlles was in der Konsole passiert ist schön und gut, aber es ist flüchtig. Stellt es euch vor wie eine Timeline auf Twitter oder ein Snapchat… Snapchat Dings oder was auch immer diese jungen Leute heutzutage benutzen.  \nSobald ihr mehr als vier oder fünf Befehle eingegeben habt, müsst ihr hochscrollen, um eure alten Ergebnisse wieder zu finden. Das ist vollkommen okay um mal schnell etwas auszuprobieren, aber eher unpraktisch für eure Arbeit, die in der Regel sowas wie Reproduzierbarkeit erfordert.\n\nDazu gibt es Scripte. Scripte sind im Grunde nur Textdateien, in die ihr R-Befehle eingebt.  \nSchön brav einen Befehl pro Zeile, wie in der Konsole.  \nScripte könnt ihr speichern und an andere Leute verschicken oder hochladen oder euch ausdrucken und an die Backe tackern — der Kreativität sind keine Grenzen gesetzt!\nScripte schreibt und speichert ihr, um eure Befehle / Auswertung / Code später wiederzufinden und nachvollziehen zu können. Ergebnisse reproduzieren könnt ihr indem ihr den Code aus dem Script nochmal ausführt.  \n\nUm euer erstes Script zu erstellen klickt ihr in RStudio oben links den Button, der nach _\"neuer Datei\"_ aussieht:\n\n\n::: {.cell hash='03-Orientierung_cache/html/unnamed-chunk-8_7caff45207807031c891f84c93cf617a'}\n::: {.cell-output-display}\n![Liebes Tagebuch: Heute habe ich einen Button geklickt. Es war sehr schön.](../images/text_editor_1.png){width=576}\n:::\n:::\n\n\nDanach ploppt das Fenster oben links auf und begrüßt euch mit einem leeren Textfeld:\n\n\n::: {.cell hash='03-Orientierung_cache/html/unnamed-chunk-9_922b9060293309fdc9a81caa4ed58324'}\n::: {.cell-output-display}\n![Na, auch hier?](../images/text_editor_2.png){width=574}\n:::\n:::\n\n\nIm Moment heißt euer Script noch `Untitled1` — das heißt, euer Script hat noch keinen Namen und ist **noch nicht gespeichert**. Letzteres wollt ihr umgehend ändern, weil all eure schönen Befehle für die Katz sind, wenn ihr euren Kram nicht speichert.  \nIhr könnt zum speichern entweder den anachronistischen Diskettenbutton klicken und eurem Script einen schönen Namen geben, oder ihr drückt `STRG + S` oder auf dem Mac `cmd + S` — der wohl wichtigste Keyboard-Shortcut der Welt. Wenn ihr Probleme habt eure Tasten zu finden oder zu benennen, dann guckt im [Glossar](#tasten) oder googlet halt.\n\n\n::: {.cell hash='03-Orientierung_cache/html/unnamed-chunk-10_1e24fbc4a3a4c249c6bc5cd56e300101'}\n::: {.cell-output-display}\n![Der \"Datei speichern…\"-Dialog](../images/text_editor_3.png){width=354}\n:::\n:::\n\n\nGebt eurem Script einen aussagekräftigen Namen. Ihr wollt ja auch in zwei Wochen noch wissen, was ihr da gemacht habt.  \nAußerdem solltet ihr darauf achten, am besten ausschließlich Zahlen und Buchstaben sowie `-` und `_` zu verwenden. Leerzeichen und Umlaute (äöü) sind zwar *in der Theorie* kein Problem, aber glaubt mir, sobald ihr euer Script an KommilitonInnen mit anderen Betriebssystemen verschickt, kann auch jedes noch so harmlos aussehende *Ü* auf einmal zu einer Reihe von kleinen Problemen führen, deren Ursache ihr erst nach Stundenlanger Probiererei (oder niemals) finden würdet. Das ist im übrigen kein R-Ding, sondern gilt auch für alles andere; Word- & Excel-Dateien, PDFs, Pornovideos...\n\nEtwas ähnliches gilt auch für den Text in eurem Script:  \nVermeidet nach Möglichkeit besondere Zeichen wie Emoji :blush: (auch wenn die theoretisch korrekt angezeigt werden). Leerzeichen sind kein Problem, und sollten sogar der besseren Lesbarkeit halber großzügig eingesetzt werden.\n\nWas der Lesbarkeit auch sehr hilft: Kommentare.  \nR ignoriert in Scripten sowie in der Konsole generell alles, was rechts neben einem `#` steht. Wir nennen dieses Zeichen übrigens entweder *Raute*, *Lattenzaun* oder [*Octothorpe*](https://en.wiktionary.org/wiki/octothorpe). Wer es *hashtag* nennt muss leider 5€ in die Millenial-Dose werfen.\n\nDamit können wir sowas machen:\n\n```r\n# Wie alt bin ich nochmal?\n2022 - 1991\n\n# Wie viele Stunden im Jahr?\n24 * 365\n```\n\nDamit bekommen eure Befehle Kontext, und sowohl ihr als auch eure KommilitonInnen können leicht rausfinden, was zum Geier ihr euch da eigentlich gedacht habt.  \nKommentare sind auch praktisch, wenn ihr ein längere Script ausführt, aber ein Befehl Probleme bereitet. Wenn ihr einfach ein `#` davor setzt, ist die Zeile *auskommentiert*, und wird von R ignoriert.\n\nWenn ihr dann ein paar Zeilen Code angesammelt habt, könnt ihr euer Script ausführen.  \nEin Script wird von oben nach unten (und von links nach rechts) ausgeführt, wenn ihr auf \"`Source`\" klickt oder `Shift + STRG + Enter` drückt (auf dem Mac `Shift + cmd + Enter`).  \nWenn ihr nur die aktuelle Zeile (da wo euer Cursor gerade ist, ist \"aktuell\") ausführen wollt, reicht `STRG + R` (Mac: `cmd + R`). Auch hier kann das [Glossar](#tasten) helfen.\n\n## Und das da rechts?\n\nAuf der rechten Seite in RStudio findet ihr unter Anderem die Hilfe (*Help*), die Dateien in eurem Projektordner (*Files*), eine Übersicht der installierten packages (*Packages*), eine Variablenübersicht (*Environment*) und von euch erstelle Graphiken (*Plots*).\nWenn ihr das hier in der richtigen Reihenfolge lest, habt ihr vermutlich keine Ahnung was das alles heißen soll — und genau deswegen wenden wir uns dem Ganzen auch Schritt wir Schritt in späteren Abschnitten zu, wenn ihr ein bisschen mehr Übersicht über die Grundlagen habt.\n\n<!-- Footnotes -->\n[^pi]: Die spitzfindigen Mac-User finden $\\pi$ mit *alt + p*. Das Zeichen kennt aber R nicht.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}